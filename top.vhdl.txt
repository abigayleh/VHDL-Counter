library ieee;
use ieee.std_logic_1164.all;
USE IEEE.NUMERIC_STD.ALL;

entity top is
port (
  --Key(1) is start and Key(0) is reset
 KEY: IN STD_LOGIC_VECTOR(3 DOWNTO 0);
 CLOCK_50: in std_LOGIC;
 SW: IN STD_LOGIC_VECTOR(17 DOWNTO 0);
 LEDR: OUT STD_LOGIC_VECTOR(15 DOWNTO 0);
 LEDG: OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
 HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7: OUT STD_LOGIC_VECTOR(6 DOWNTO 0));
end top;

ARCHITECTURE TOPLEVEL OF TOP IS 
COMPONENT ALU IS
port ( 
A, B, C, D: in std_logic;
HEX: out std_logic_vector(6 downto 0));
END COMPONENT;

COMPONENT COUNTER60 IS 
	PORT (CLK, clrcnt: IN STD_LOGIC;
			-- Output: 
			MAXCOUNT: OUT STD_LOGIC);
END COMPONENT;

COMPONENT COUNTER4 IS
	PORT (CLK, clrcnt: IN STD_LOGIC;
			MAXCOUNT: IN STD_LOGIC;
			
			INPUTA: IN UNSIGNED(3 DOWNTO 0);
			INPUTB: IN UNSIGNED(3 DOWNTO 0);
			INPUTC: IN UNSIGNED(3 DOWNTO 0);
			INPUTD: IN UNSIGNED(3 DOWNTO 0);
			
			HIGHNUM: OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
			LOWNUM: OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
			
			HIGHMIN: OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
			LOWMIN: OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
			
			HIGHHOUR: OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
			LOWHOUR: OUT STD_LOGIC_VECTOR(3 DOWNTO 0));
END COMPONENT;

signal maxcount: std_logic;

signal LOWSEC: std_logic;
signal HIGHSEC: std_logic;

signal HIGHSECNUM: std_logic_VECTOR(3 DOWNTO 0);
signal LOWSECNUM: std_logic_VECTOR(3 DOWNTO 0);

SIGNAL HIGHMINNUM:std_logic_VECTOR(3 DOWNTO 0);
SIGNAL LOWMINNUM: std_logic_VECTOR(3 DOWNTO 0);

SIGNAL HIGHHOURNUM:std_logic_VECTOR(3 DOWNTO 0);
SIGNAL LOWHOURNUM: std_logic_VECTOR(3 DOWNTO 0);

SIGNAL INPUTA: UNSIGNED(3 DOWNTO 0);
SIGNAL INPUTB: UNSIGNED(3 DOWNTO 0);
SIGNAL INPUTC: UNSIGNED(3 DOWNTO 0);
SIGNAL INPUTD: UNSIGNED(3 DOWNTO 0);

SIGNAL INPUT7: std_logic_VECTOR(6 DOWNTO 0);
SIGNAL INPUT6: std_logic_VECTOR(6 DOWNTO 0);
SIGNAL INPUT5: std_logic_VECTOR(6 DOWNTO 0);
SIGNAL INPUT4: std_logic_VECTOR(6 DOWNTO 0);


BEGIN

--Calculates when 60 seconds is up
SECONDS: COUNTER60 PORT MAP(CLOCK_50, KEY(0), MAXCOUNT);

--Outputs value of switches
SEVEN: ALU PORT MAP(SW(15), SW(14), SW(13), SW(12), INPUT7);
SIX: ALU PORT MAP(SW(11), SW(10), SW(9), SW(8), INPUT6);
FIVE: ALU PORT MAP(SW(7), SW(6), SW(5), SW(4), INPUT5);
FOUR: ALU PORT MAP(SW(3), SW(2), SW(1), SW(0), INPUT4);

--Outputs value of signals, depending on inputs (either from switches or starting from zero)
TIMERS: COUNTER4 PORT MAP(CLOCK_50, KEY(0), MAXCOUNT, INPUTA, INPUTB, INPUTC, INPUTD, HIGHSECNUM, LOWSECNUM, HIGHMINNUM, 
LOWMINNUM, HIGHHOURNUM, LOWHOURNUM);

--Outputs correct number to hex lights, depending on input signals
--Seconds
LOWHEXSEC: ALU PORT MAP(LOWSECNUM(3), LOWSECNUM(2), LOWSECNUM(1), LOWSECNUM(0), HEX2);
HIGHHEXSEC: ALU PORT MAP(HIGHSECNUM(3), HIGHSECNUM(2), HIGHSECNUM(1), HIGHSECNUM(0), HEX3);
--Minutes
LOWHEXMIN: ALU PORT MAP(LOWMINNUM(3), LOWMINNUM(2), LOWMINNUM(1), LOWMINNUM(0), HEX4);
HIGHHEXMIN: ALU PORT MAP(HIGHMINNUM(3), HIGHMINNUM(2), HIGHMINNUM(1), HIGHMINNUM(0), HEX5);
--Hours
LOWHEXHOUR: ALU PORT MAP(LOWHOURNUM(3), LOWHOURNUM(2), LOWHOURNUM(1), LOWHOURNUM(0), HEX6);
HIGHHEXHOUR: ALU PORT MAP(HIGHHOURNUM(3), HIGHHOURNUM(2), HIGHHOURNUM(1), HIGHHOURNUM(0), HEX7);


PROCESS(CLOCK_50, INPUT4, INPUT5, INPUT6, INPUT7)

BEGIN

IF(RISING_EDGE(CLOCK_50)) THEN

--Inputs 4 to 7 represent value from ALU
--Convert into counter input for Counter4 entity
		IF(INPUT4 = "1000000") THEN
			INPUTA <= "0000";
		ELSIF(INPUT4 = "1111001") THEN
			INPUTA <= "0001";
		ELSIF(INPUT4 = "0100100") THEN
			INPUTA <= "0010";
		ELSIF(INPUT4 = "0110000") THEN
			INPUTA <= "0011";
		ELSIF(INPUT4 = "0011001") THEN
			INPUTA <= "0100";
		ELSIF(INPUT4 = "0010010") THEN
			INPUTA <= "0101";
		ELSIF(INPUT4 = "0000011") THEN
			INPUTA <= "0110";
		ELSIF(INPUT4 = "1111000") THEN
			INPUTA <= "0111";
		ELSIF(INPUT4 = "0000000") THEN
			INPUTA <= "1000";
		ELSIF(INPUT4 = "0011000") THEN 
			INPUTA <= "1001";
		END IF;
			
		IF(INPUT5 = "1000000") THEN
			INPUTB <= "0000";
		ELSIF(INPUT5 = "1111001") THEN
			INPUTB <= "0001";
		ELSIF(INPUT5 = "0100100") THEN
			INPUTB <= "0010";
		ELSIF(INPUT5 = "0110000") THEN
			INPUTB <= "0011";
		ELSIF(INPUT5 = "0011001") THEN 
			INPUTB <= "0100";
		ELSIF(INPUT5 = "0010010") THEN
			INPUTB <= "0101";
		END IF;
			
			
		IF(INPUT6 = "1111001") THEN 
			INPUTC <= "0001";
		ELSIF(INPUT6 = "0100100") THEN 
			INPUTC <= "0010";
		ELSIF(INPUT6 = "0110000") THEN 
			INPUTC <= "0011";
		ELSIF(INPUT6 = "0011001") THEN
			INPUTC <= "0100";
		ELSIF(INPUT6 = "0010010") THEN 
			INPUTC <= "0101";
		ELSIF(INPUT6 = "0000011") THEN 
			INPUTC <= "0110";
		ELSIF(INPUT6 = "1111000") THEN
			INPUTC <= "0111";
		ELSIF(INPUT6 = "0000000") THEN
			INPUTC <= "1000";
		ELSIF(INPUT6 = "0011000") THEN 
			INPUTC <= "1001";
		ELSE
			INPUTC <= "0000";
		END IF; 
			
		IF(INPUT7 = "1111001") THEN 
			INPUTD <= "0001";
		ELSIF(INPUT7 = "0100100") THEN
			INPUTD <= "0010";
		ELSE
			INPUTD <= "0000";
		END IF;

END IF;
END PROCESS;

end toplevel;







